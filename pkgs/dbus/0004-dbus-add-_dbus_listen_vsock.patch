From 468b34e34ae36970029d544455df80d767b95296 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>
Date: Sun, 10 Jan 2021 00:42:54 +0400
Subject: [PATCH 4/9] dbus: add _dbus_listen_vsock
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
SPDX-License-Identifier: AFL-2.1 OR GPL-2.0-or-later
SPDX-FileCopyrightText: 2002, 2003, 2006  Red Hat, Inc.
SPDX-FileCopyrightText: 2003 CodeFactory AB
SPDX-FileCopyrightText: The D-Bus Authors

Signed-off-by: Marc-Andr√© Lureau <marcandre.lureau@redhat.com>
---
 dbus/dbus-sysdeps-unix.c | 140 +++++++++++++++++++++++++++++++++++++++
 dbus/dbus-sysdeps-unix.h |   7 ++
 2 files changed, 147 insertions(+)

diff --git a/dbus/dbus-sysdeps-unix.c b/dbus/dbus-sysdeps-unix.c
index cc40c0cd..9a46625a 100644
--- a/dbus/dbus-sysdeps-unix.c
+++ b/dbus/dbus-sysdeps-unix.c
@@ -1565,6 +1565,146 @@ out:
   return fd;
 }
 
+#ifdef DBUS_ENABLE_VSOCK
+static dbus_bool_t
+_dbus_vsock_parse_cid (const char    *cid,
+                       unsigned int  *ret,
+                       DBusError     *error)
+{
+  DBusString cid_str;
+  unsigned long val;
+
+  _dbus_string_init_const (&cid_str, cid);
+
+  if (!_dbus_string_parse_uint (&cid_str, 0, &val, NULL) || val > _DBUS_UINT32_MAX)
+    {
+      dbus_set_error (error,
+                      DBUS_ERROR_BAD_ADDRESS,
+                      "Failed to parse vsock CID value '%s'", cid);
+      return FALSE;
+    }
+
+
+  *ret = val;
+  return TRUE;
+}
+
+static dbus_bool_t
+_dbus_vsock_parse_port (const char    *port,
+                        unsigned int  *ret,
+                        DBusError     *error)
+{
+  DBusString port_str;
+  unsigned long val;
+
+  _dbus_string_init_const (&port_str, port);
+
+  if (!_dbus_string_parse_uint (&port_str, 0, &val, NULL) || val > _DBUS_UINT32_MAX)
+    {
+      dbus_set_error (error,
+                      DBUS_ERROR_BAD_ADDRESS,
+                      "Failed to parse vsock port value '%s'", port);
+      return FALSE;
+    }
+
+  *ret = val;
+  return TRUE;
+}
+
+int
+_dbus_listen_vsock (const char *cid,
+                    const char *port,
+                    DBusString *retcid,
+                    DBusString *retport,
+                    DBusError  *error)
+{
+  struct sockaddr_vm sa;
+  int saved_errno;
+  int fd = -1;
+
+  _DBUS_ASSERT_ERROR_IS_CLEAR (error);
+  _DBUS_ZERO (sa);
+  sa.svm_family = AF_VSOCK;
+  sa.svm_cid = VMADDR_CID_ANY;
+  sa.svm_port = VMADDR_PORT_ANY;
+
+  if ((cid && !_dbus_vsock_parse_cid (cid, &sa.svm_cid, error)) ||
+      (port && !_dbus_vsock_parse_port (port, &sa.svm_port, error)))
+    {
+      _DBUS_ASSERT_ERROR_IS_SET (error);
+      return -1;
+    }
+
+  if (!_dbus_open_socket (&fd, AF_VSOCK, SOCK_STREAM, 0, error))
+    {
+      _DBUS_ASSERT_ERROR_IS_SET (error);
+      return -1;
+    }
+
+  if (bind (fd, (struct sockaddr *) &sa, sizeof (sa)) < 0)
+    {
+      saved_errno = errno;
+      _dbus_close (fd, NULL);
+      dbus_set_error (error, _dbus_error_from_errno (saved_errno),
+                      "Failed to bind VSOCK socket of CID:%u: port:%u: %s",
+                      sa.svm_cid, sa.svm_port, _dbus_strerror (saved_errno));
+      return -1;
+    }
+
+  if (!_dbus_set_fd_nonblocking (fd, error))
+    {
+      _DBUS_ASSERT_ERROR_IS_SET (error);
+      _dbus_close (fd, NULL);
+      return -1;
+    }
+
+  if (listen (fd, 30 /* backlog */) < 0)
+    {
+      saved_errno = errno;
+      dbus_set_error (error, _dbus_error_from_errno (saved_errno),
+                      "Failed to listen on VSOCK socket of CID:%u port:%u: %s",
+                      sa.svm_cid, sa.svm_port, _dbus_strerror (saved_errno));
+      _dbus_close (fd, NULL);
+      return -1;
+    }
+
+  if (!port || !cid)
+    {
+      int result;
+      socklen_t addrlen;
+
+      addrlen = sizeof (sa);
+      result = getsockname (fd, (struct sockaddr *) &sa, &addrlen);
+
+      if (result == -1)
+        {
+          saved_errno = errno;
+          dbus_set_error (error, _dbus_error_from_errno (saved_errno),
+                          "Failed to retrieve VSOCK socket name: %s",
+                          _dbus_strerror (saved_errno));
+          _dbus_close (fd, NULL);
+          return -1;
+        }
+    }
+
+  if (!_dbus_string_append_printf (retcid, "%u", sa.svm_cid))
+    {
+      dbus_set_error (error, DBUS_ERROR_NO_MEMORY, NULL);
+      _dbus_close (fd, NULL);
+      return -1;
+    }
+
+  if (!_dbus_string_append_printf (retport, "%u", sa.svm_port))
+    {
+      dbus_set_error (error, DBUS_ERROR_NO_MEMORY, NULL);
+      _dbus_close (fd, NULL);
+      return -1;
+    }
+
+  return fd;
+}
+#endif
+
 /**
  * Creates a socket and binds it to the given path, then listens on
  * the socket. The socket is set to be nonblocking.  In case of port=0
diff --git a/dbus/dbus-sysdeps-unix.h b/dbus/dbus-sysdeps-unix.h
index e86de6d9..49b8f436 100644
--- a/dbus/dbus-sysdeps-unix.h
+++ b/dbus/dbus-sysdeps-unix.h
@@ -73,6 +73,13 @@ int _dbus_listen_unix_socket  (const char     *path,
                                dbus_bool_t     abstract,
                                DBusError      *error);
 
+int _dbus_listen_vsock        (const char     *cid,
+                               const char     *port,
+                               DBusString     *retcid,
+                               DBusString     *retport,
+                               DBusError      *error);
+
+
 int _dbus_connect_exec (const char     *path,
                         char *const    argv[],
                         DBusError      *error);
-- 
2.42.0

